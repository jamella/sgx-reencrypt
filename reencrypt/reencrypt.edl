enclave {
	include "types.h"

    trusted {
		/* generate channel keypair */
		public int generate_keypair([out, size=32] uint8_t *public_key);
		/* seal/unseal channel keypair */
		public int seal_keypair();
		public int unseal_keypair([out, size=32] uint8_t *public_key);

		/* reencryption */
		public int reencrypt([user_check]client_id *clid,
			[user_check]uint8_t *request, size_t requestlen,
			[user_check]uint8_t *response,
                        [user_check]size_t *responselen);

		/* key registration
			input:
				- client id
				- boxed serialized key

			output:
				- boxed key id
		*/
		public int register_key([user_check] client_id *clid,
			[user_check]uint8_t *request, size_t requestlen,
			[user_check]uint8_t *response,
                        [user_check]size_t *responselen);
    };

    untrusted {
		// filesystem functions. return 0 if success, 1 otherwise
        int untrusted_fs_store([in, size=namelen] char *name, size_t namelen, [in, size=datalen] uint8_t *data, size_t datalen);
		int untrusted_fs_load([in, size=namelen] char *name, size_t namelen, [out] uint8_t **data, [out] size_t *datalen);
		void untrusted_fs_free([user_check] uint8_t *data);
		// unsafe time
		uint64_t time([user_check] uint64_t *timer);
    };
};
